"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[706],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=o,m=d["".concat(s,".").concat(u)]||d[u]||h[u]||i;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7179:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],l={id:"guide",title:"Deployment Guide",sidebar_label:"Deployment Guide",slug:"/deployment/guide"},s=void 0,p={unversionedId:"deployment/guide",id:"deployment/guide",isDocsHomePage:!1,title:"Deployment Guide",description:"This document describes the complete deployment of an Sequent Tech project",source:"@site/docs/deployment/guide.md",sourceDirName:"deployment",slug:"/deployment/guide",permalink:"/documentation/docs/deployment/guide",editUrl:"https://github.com/sequentech/documentation/edit/master/docs/deployment/guide.md",tags:[],version:"current",frontMatter:{id:"guide",title:"Deployment Guide",sidebar_label:"Deployment Guide",slug:"/deployment/guide"},sidebar:"sidebar",previous:{title:"Overview",permalink:"/documentation/docs/overview"},next:{title:"Translation Guide",permalink:"/documentation/docs/translation/guide"}},c=[{value:"Requirements",id:"requirements",children:[]},{value:"Ops environment",id:"ops-environment",children:[{value:"Configuring access to each VM inside the ops machine",id:"configuring-access-to-each-vm-inside-the-ops-machine",children:[]},{value:"Configuring ops hosts",id:"configuring-ops-hosts",children:[]},{value:"Collaborate sharing with tmuxinator",id:"collaborate-sharing-with-tmuxinator",children:[]},{value:"Creating the mux project",id:"creating-the-mux-project",children:[]}]},{value:"For each machine",id:"for-each-machine",children:[{value:"Machine provisioning",id:"machine-provisioning",children:[]},{value:"Machine configuration",id:"machine-configuration",children:[]},{value:"Network, firewall &amp; DNS",id:"network-firewall--dns",children:[]},{value:"Backups",id:"backups",children:[]},{value:"Non-root permissions (optional)",id:"non-root-permissions-optional",children:[]},{value:"Timezones details",id:"timezones-details",children:[]},{value:"Install and configure deployment dependencies",id:"install-and-configure-deployment-dependencies",children:[]}]},{value:"Web servers master &amp; slave deployment",id:"web-servers-master--slave-deployment",children:[{value:"Configure the slave",id:"configure-the-slave",children:[]}]},{value:"Deployment of authorities",id:"deployment-of-authorities",children:[{value:"Connecting authorities",id:"connecting-authorities",children:[]},{value:"Test the connection between the authorities",id:"test-the-connection-between-the-authorities",children:[]},{value:"Connecting web servers with authorities",id:"connecting-web-servers-with-authorities",children:[]}]},{value:"Create a test election",id:"create-a-test-election",children:[]},{value:"High availability and load balancing (HA/LB)",id:"high-availability-and-load-balancing-halb",children:[{value:"Checking the cluster",id:"checking-the-cluster",children:[]},{value:"Checking that the slave works using a Load Balancer",id:"checking-that-the-slave-works-using-a-load-balancer",children:[]},{value:"Promoting a slave to be master",id:"promoting-a-slave-to-be-master",children:[]}]},{value:"Troubleshooting",id:"troubleshooting",children:[{value:"Problems when creating the election",id:"problems-when-creating-the-election",children:[]},{value:"The election tally never succeeds",id:"the-election-tally-never-succeeds",children:[]},{value:"Supervisor is not running",id:"supervisor-is-not-running",children:[]},{value:"Problems provisioning",id:"problems-provisioning",children:[]},{value:"Issues deploying High Availability / Load Balancer",id:"issues-deploying-high-availability--load-balancer",children:[]},{value:"Correctly recreating the TLS certificate",id:"correctly-recreating-the-tls-certificate",children:[]}]}],h={toc:c};function d(e){var t=e.components,l=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This document describes the complete deployment of an Sequent Tech project\nwith two Authorities for a production environment in virtual machines."),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("p",null,"You need 4 Linux x64 host machines with at least 4GB of RAM each and a clean\nUbuntu 20.04 LTS installed and around 30GB of HD."),(0,i.kt)("p",null,"The structure of the four machines is:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"prod-s1\nused as master web server")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"prod-s2\nused as slave web server")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"prod-a1\nused as election authority 1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"prod-a2\nused as election authority 2"))),(0,i.kt)("p",null,"The instructions in the requirements section should be executed in all 4\nmachines. We asume that either:"),(0,i.kt)("p",null,"a. A fith machine can be used as the load balancer and for high availability\npurposes and act as the public interface to the Internet. This is not a\nrequirement, you can just point the DNS to the master and change it manually\nif it fails, but then only the master will be serving requests. The load\nbalancer can be provided by the cloud provided if you use one. We do not have\nany ansible deployment script to configure the load balancer."),(0,i.kt)("p",null,"b. Otherwise, prod-s1 will be used as the public interface interface to the\nInternet unless it fails, then prod-s2 will be used for continuing operations."),(0,i.kt)("h2",{id:"ops-environment"},"Ops environment"),(0,i.kt)("p",null,"It\u2019s recommended to minimize the number of publicly reachable machines to\nminimize attack surface. That\u2019s why other than the publicly serving machines like load\nbalances and such, all the communications should be done through an internal\nnetwork unreachable through the Internet."),(0,i.kt)("p",null,"To reach to this internal network, we suggest to use an ",(0,i.kt)("inlineCode",{parentName:"p"},"ops")," machine as a\nsingle point of access for increased security and simplicity. For example, in\nour case as we usually use Amazon Web Services EC2, our ",(0,i.kt)("inlineCode",{parentName:"p"},"ops")," machine is called\n",(0,i.kt)("inlineCode",{parentName:"p"},"aws-ops"),". This machine allows us to access all the other ones via ssh."),(0,i.kt)("p",null,"If you are using vagrant for local development, your ",(0,i.kt)("inlineCode",{parentName:"p"},"ops")," machine might just\nbe the physical host."),(0,i.kt)("p",null,"WARNING: Currently the vagrant configuration is outdated and needs changes to\nwork."),(0,i.kt)("p",null,"Some other recommendations to minimize attack surface:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use wisely security groups: only open ports to the Internet if you really\nneed to."),(0,i.kt)("li",{parentName:"ul"},"Do not setup a public ip address to a machine if it can keep being private.\nAll machines should only be accessible through ssh via the ",(0,i.kt)("inlineCode",{parentName:"li"},"ops")," machine,\nwith the root@aws-ops user and to the root user of the destination machine.")),(0,i.kt)("h3",{id:"configuring-access-to-each-vm-inside-the-ops-machine"},"Configuring access to each VM inside the ops machine"),(0,i.kt)("p",null,"Each machine should have its own static private ip address inside the private\nnetwork and its own name. This should be configured in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ops")," machine to\naccess them by name."),(0,i.kt)("p",null,"By default, ssh access to this deployment machines is done through the ",(0,i.kt)("inlineCode",{parentName:"p"},"ubuntu"),"\nuser, and only from that you can ",(0,i.kt)("inlineCode",{parentName:"p"},"sudo -s")," to root or other users. In order for\nnot to need to specify this user everytime you login and for every new machine,\nwe suggest you add the following two lines to the ",(0,i.kt)("inlineCode",{parentName:"p"},"/root/.ssh/config")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Host *\nUser ubuntu\n")),(0,i.kt)("h3",{id:"configuring-ops-hosts"},"Configuring ops hosts"),(0,i.kt)("p",null,"For each machine, you will need to add a line in ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/hosts")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ops"),"\nmachine, for example  ",(0,i.kt)("inlineCode",{parentName:"p"},"192.168.1.2 prod-s1"),"."),(0,i.kt)("p",null,"In case of using vagrant for local deployment, this won't be needed as it's\nalready configured by vagrant."),(0,i.kt)("h3",{id:"collaborate-sharing-with-tmuxinator"},"Collaborate sharing with tmuxinator"),(0,i.kt)("p",null,"To help collaboration during operations among employees and to ease operations\nand monitorization of a deployment, we recommend to execute everything under a\nsingle shared ",(0,i.kt)("inlineCode",{parentName:"p"},"tmux")," session per deployment in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ops")," machine. "),(0,i.kt)("p",null,"We use ",(0,i.kt)("inlineCode",{parentName:"p"},"tmuxinator")," to help managing these ",(0,i.kt)("inlineCode",{parentName:"p"},"tmux")," sessions. Please install it\nin the ",(0,i.kt)("inlineCode",{parentName:"p"},"ops")," machine in the root user."),(0,i.kt)("p",null,"You can access our base skeleton configuration for a deployment in the\n",(0,i.kt)("a",{target:"_blank",href:n(4079).Z},"deployment-skel.yml")," file. You can:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Install ",(0,i.kt)("inlineCode",{parentName:"li"},"tmux")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"tmuxinator")," in the ",(0,i.kt)("inlineCode",{parentName:"li"},"ops")," machine:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"apt install tmux tmuxinator -y\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Add an ",(0,i.kt)("inlineCode",{parentName:"li"},"mux")," alias to your ",(0,i.kt)("inlineCode",{parentName:"li"},"/root/.bashrc"),": ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"echo \"alias mux='tmuxinator'\" >> /root/.bashrc\n")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create the base tmuxinator config file that you'll copy for each deployment\nby copying the file ",(0,i.kt)("a",{target:"_blank",href:n(4079).Z},"deployment-skel.yml")," into the\nfile ",(0,i.kt)("inlineCode",{parentName:"p"},"/root/.tmuxinator/deployment-skel.yml")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"ops")," machine, and also the\nfile ",(0,i.kt)("a",{target:"_blank",href:n(8081).Z},".tmux.conf")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"/root/.tmux.conf")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"ops"),"\nmachine.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Learn the basic tmuxinator & tmux commands:"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mux list"),": List the available projects"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mux copy deployment-skel prod"),": Copy the deployment-skel to create a ",(0,i.kt)("inlineCode",{parentName:"li"},"prod"),"\nproject. This commands directly enters into your configured editor, to edit\nthe project before creating it. If you are using the base skel we mentioned\nearlier and you are using vim as the editor, you can easily just do a quick\nfind & replace all with the command: ",(0,i.kt)("inlineCode",{parentName:"li"},":%s/BASE/prod/g")," or similar."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mux prod"),": Attaches to the ",(0,i.kt)("inlineCode",{parentName:"li"},"prod")," project session, starting it first if it\nwasn't started."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mux del prod"),": Removes the prod project."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mux stop prod"),": Stops the prod project session."),(0,i.kt)("li",{parentName:"ul"},"Ctrl+a, d: Once in a session, detaches from this session."),(0,i.kt)("li",{parentName:"ul"},"Ctrl+a, c: Adds a new tab terminal to the current session."),(0,i.kt)("li",{parentName:"ul"},"Ctrl+Left/Right arrow: moves from one tab terminal to the other.")),(0,i.kt)("h3",{id:"creating-the-mux-project"},"Creating the mux project"),(0,i.kt)("p",null,"Each deployment is compromised of multiple machines. As mentioned earlier, we\nrecommend to create a tmuxinator project for each deployment."),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"mux copy deployment-skel <deployment-name>"),": Copy the deployment-skel to\ncreate a ",(0,i.kt)("inlineCode",{parentName:"p"},"<deployment-name>")," project. Do a quick find & replace all in vim\ninside the file with the command: ",(0,i.kt)("inlineCode",{parentName:"p"},":%s/BASE/<deployment-name>/g")," then save and\nexit with ",(0,i.kt)("inlineCode",{parentName:"p"},":wq"),"."),(0,i.kt)("h2",{id:"for-each-machine"},"For each machine"),(0,i.kt)("p",null,"Refer to this section for the configuration steps you need to take into account\nand execute for each of the machines in the deployment (sequent master, slave,\nauth1, auth2..)."),(0,i.kt)("h3",{id:"machine-provisioning"},"Machine provisioning"),(0,i.kt)("p",null,"As mentioned earlier, you should provision each VM with Ubuntu 20.04 LTS,\n4GB of RAM and usually around 30GB HD. The machine requirements might\nvary depending on the size and number of the elections that these machines will\nbe used for."),(0,i.kt)("p",null,"For a faster deployment we recommend to increase the number of cores. This can\nbe reduced later to even just 1 core and 2GB of RAM."),(0,i.kt)("p",null,"In AWS EC2 we usually use the free ",(0,i.kt)("inlineCode",{parentName:"p"},"Ubuntu 20.04 LTS - Focal")," AWS Marketplace\nAMI provided by ",(0,i.kt)("inlineCode",{parentName:"p"},"Canonical Group Limited"),". If you are using vagrant, it will\ntake care of the provisioning of the VMs."),(0,i.kt)("p",null,"It's customary for us to name each machine by the hostname it will use. For\nexample in AWS EC2 an instance whose hostname is ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-a1")," (trustee #1 for the\nproduction deployment) would be called ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-a1"),". Also, the name of the related\nvolume (the hard disk) would have the same name."),(0,i.kt)("h3",{id:"machine-configuration"},"Machine configuration"),(0,i.kt)("p",null,"Once the machines are provisioned, we should configure them individually. The\nansible deployment script is typically executed within the deployed machine.\nThis allows us to have different deployments with different ansible versions\nall reachable through the ",(0,i.kt)("inlineCode",{parentName:"p"},"ops")," machine."),(0,i.kt)("h3",{id:"network-firewall--dns"},"Network, firewall & DNS"),(0,i.kt)("p",null,"We use static private (and public) ip addresses. All the machines in the\ndeployment should be able to see each other and be reachable via the ",(0,i.kt)("inlineCode",{parentName:"p"},"ops"),"\nmachine."),(0,i.kt)("p",null,"To do that, for example in AWS we assign a security group called ",(0,i.kt)("inlineCode",{parentName:"p"},"internal"),"\nthat has the following rule:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: All traffic"),(0,i.kt)("li",{parentName:"ul"},"Protocol: All"),(0,i.kt)("li",{parentName:"ul"},"Port range: All"),(0,i.kt)("li",{parentName:"ul"},"Source: 172.31.0.0/16")),(0,i.kt)("p",null,"Firewall rules should be created to allow the following kind of connections:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"postgresql:")," prod-s1 ",(0,i.kt)("strong",{parentName:"li"},"<<tcp:5432>>")," prod-s2"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"postgresql's rsync:")," prod-s1 ",(0,i.kt)("strong",{parentName:"li"},"<<tcp:22>>")," prod-s2"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"memcached:")," prod-s1 ",(0,i.kt)("strong",{parentName:"li"},"<<udp:11211>>")," prod-s2"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"web site:")," ","[prod-s1, prod-s2]"," ",(0,i.kt)("strong",{parentName:"li"},"<<tcp:443>>")," Internet"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"sentry api:")," ","[prod-s1, prod-s2]"," ",(0,i.kt)("strong",{parentName:"li"},"<<tcp:9090>>")," Internet"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"sentry web site:")," ","[prod-s1, prod-s2]"," ",(0,i.kt)("strong",{parentName:"li"},"<<tcp:8443>>")," Internet"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"eotest:")," prod-a1 ",(0,i.kt)("strong",{parentName:"li"},"<<tcp:5000>>")," prod-a2"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"mixnet:")," prod-a1 ",(0,i.kt)("strong",{parentName:"li"},"<<tcp:4081>>")," prod-a2"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"mixnet:")," prod-a1 ",(0,i.kt)("strong",{parentName:"li"},"<<udp:8081>>")," prod-a2"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"private ballots download:")," ","[prod-s1, prod-s2]"," ",(0,i.kt)("strong",{parentName:"li"},"<<tcp:14453>>")," ","[prod-a1, prod-a2]")),(0,i.kt)("p",null,"You can create the appropiate rules to allow this access to the different\nservices. For example if one or more of the trustee machines are external,\nyou will have to open the appropiate ports so that they can communicate with\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2")," machines and with the trustee machines in the\ninternal network."),(0,i.kt)("p",null,"We also typically configure the public access to the servers through cloudflare.\nTo make it work, you need to give public access to the 80,443 and 8443 ports\nto ",(0,i.kt)("a",{parentName:"p",href:"https://www.cloudflare.com/ips/"},"cloudflare ips"),". In AWS we use a\n",(0,i.kt)("inlineCode",{parentName:"p"},"cloudflare")," security group for that and apply it either to the master machine\n(",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1"),") or to the load balancer, and then assign a Public Static IP\naddress for that machine and point to that IP Address in Cloudflare's DNS."),(0,i.kt)("h3",{id:"backups"},"Backups"),(0,i.kt)("p",null,"In AWS EC2 we use ",(0,i.kt)("inlineCode",{parentName:"p"},"AWS Backup")," to automate backups. They are done at the VM\nlevel and they can be easily created by simply assigning a tag to the Volumnes\nof the VMs."),(0,i.kt)("p",null,"AWS Backup creates and manages (also deleting old ones) snapshots of volumes.\nBTW we usually configure the instances to be encrypted, and thus snasphots are\nalso encrypted. "),(0,i.kt)("p",null,"We usually have a backup plan in ",(0,i.kt)("inlineCode",{parentName:"p"},"AWS Backup")," that is applied to any volume\nwith the ",(0,i.kt)("inlineCode",{parentName:"p"},"backup-normal")," tag, with the following configuration:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1 daily backup, save 6 last."),(0,i.kt)("li",{parentName:"ul"},"1 weekly backup, save 4 last."),(0,i.kt)("li",{parentName:"ul"},"1 monthly backup, save 24 last."),(0,i.kt)("li",{parentName:"ul"},"1 each 3 hours, save 7 last.")),(0,i.kt)("p",null,"To restore a backup, you just need to create a volume out of this snapshot in\nthe same Availability Zone as the instance you want to attach it to. "),(0,i.kt)("p",null,"We usually do that manually with a name similar to the original volume name, for\nexample it could be ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-a1-restored-1"),". You could stop the ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-a1")," instance,\ndetach the ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-a1")," volume, attach the new ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-a1-restored-1")," volume as\n",(0,i.kt)("inlineCode",{parentName:"p"},"/dev/sda1"),"."),(0,i.kt)("h3",{id:"non-root-permissions-optional"},"Non-root permissions (optional)"),(0,i.kt)("p",null,"One can use a non-root use for deployment. Unless a requirement, we don't\nusually do it. Thus, this step is not very well tested lately. Deployment is\ntypically done within the Ubuntu machine as the root user. You can skip this\nstep."),(0,i.kt)("p",null,"To configure non-root permissions in the VM, first create the deployment user",(0,i.kt)("br",{parentName:"p"}),"\n","if it hasn't been created yet. We'll use ",(0,i.kt)("strong",{parentName:"p"},"sequent")," for that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'root@prod-s1 # adduser sequent sequent --gecos "FullName,RoomNumber,WorkPhone,HomePhone" --disabled-password\n')),(0,i.kt)("p",null,"Afterwards, you should add the permissions that the sequent user requires for\nadministration and deployment."),(0,i.kt)("p",null,"This is how you do it in the two servers that will be used as authorities:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"root@prod-s1 # wget https://raw.githubusercontent.com/sequentech/deployment-tool/next/doc/production/auth.sudoers\nroot@prod-s1 # cat auth.sudoers >> /etc/sudoers\n")),(0,i.kt)("p",null,"And this is how you do it for the two other servers that will be used as master\nand slave machines:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"root@prod-s1 # wget https://raw.githubusercontent.com/sequentech/deployment-tool/next/doc/production/sequent.sudoers\nroot@prod-s1 # cat sequent.sudoers >> /etc/sudoers\n")),(0,i.kt)("h3",{id:"timezones-details"},"Timezones details"),(0,i.kt)("p",null,"Once deployed, the server will be configured to use UTC timezone. This is\nautomatically done by the ansible deployment scripts. This is considered a\n",(0,i.kt)("a",{parentName:"p",href:"http://yellerapp.com/posts/2015-01-12-the-worst-server-setup-you-can-make.html"},"good practice"),",\nand is performed by the ansible deployment scripts by executing the following\ncommands automatically:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ln -sf /usr/share/zoneinfo/UTC /etc/localtime\ndpkg-reconfigure -f noninteractive tzdata\n")),(0,i.kt)("p",null,"Server logs, therefore, will all be in UTC."),(0,i.kt)("p",null,"Any date and time you input in your data will be in UTC timezone. You can\nconfigure the output timezone and date format of the election results PDFs using\nthe\n",(0,i.kt)("a",{parentName:"p",href:"../file-formats/election-creation-json#pipe-configure_pdf"},"configure_pdf pipe"),".\nSee ",(0,i.kt)("a",{parentName:"p",href:"../file-formats/election-creation-json#results-config-pipes"},"Results Config Pipes"),"\nfor more information about how this works."),(0,i.kt)("h3",{id:"install-and-configure-deployment-dependencies"},"Install and configure deployment dependencies"),(0,i.kt)("p",null,"Within the provisioned machine (for example ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1"),"), there are a series of\nsteps required for a  proper and successful deployment. We will from now on\nassume we are using the root user (",(0,i.kt)("inlineCode",{parentName:"p"},"sudo -s"),") inside the provisioned VM to\nexecute all the tasks."),(0,i.kt)("p",null,"We will first install some dependencies and reboot:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'echo "source /usr/share/virtualenvwrapper/virtualenvwrapper.sh" >> /root/.bashrc\napt-get update && apt-get dist-upgrade -y && apt install virtualenvwrapper -y  && reboot \n')),(0,i.kt)("p",null,"We usually have a copy of the configuration file in ",(0,i.kt)("inlineCode",{parentName:"p"},"ops")," then copy it to the\nmachine (we cannot directly ssh to it for security reasons). So we usually have\na generic config file in ops machine. Then from ops, copy it to the provisioned\nmachine, for example in prod-s1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"scp config-base.yml prod-s1:/home/ubuntu/config.yml\n")),(0,i.kt)("p",null,"The previous step is not really required, but it is required for the following\nsteps to have the ",(0,i.kt)("inlineCode",{parentName:"p"},"config.yml")," inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"/home/ubuntu"),". You can for example\nuse the config file from ",(0,i.kt)("a",{target:"_blank",href:n(5035).Z},"config.master.yml")," as a\nbase, copying it instead."),(0,i.kt)("p",null,"Then in the provisioned machine as root, we install dependencies and move the\nconfig file where it needs to be (for example ",(0,i.kt)("inlineCode",{parentName:"p"},"/root/prod-s1/root.yml"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# change the NAME var to the appropiate name\nexport NAME="prod-s1"\nexport LC_ALL="en_US.UTF-8"\nexport LC_CTYPE="en_US.UTF-8"\nmkvirtualenv ansible -p $(which python3)\ndeactivate\nworkon ansible\n\n# should return Python 3.8.5:\npython --version \ncd /root\ngit clone https://github.com/sequentech/deployment-tool.git $NAME\ncd $NAME\ngit checkout master\n\n# needed for ansible. If you are deploying an election authority use\n# doc/production/playbook.auth.yml instead\necho "localhost ansible_connection=local" > inventory \ncp doc/production/playbook.sequent.yml playbook.yml\n\n# copy the config file to /root/$NAME/root.yml\ncp /home/ubuntu/config.yml config.yml\n\n# update and set random passwords. NOTE: Do not do that for the slave machines, \n# it needs to be using the same passwords as the master.\nDATE=$(date); cp config.yml "config_base_$DATE.yml"; python3 helper-tools/manage_config_pwd.py -c "config_base_$DATE.yml" -l 40 -o config.yml\n\npip install ansible==2.9.22\n')),(0,i.kt)("p",null,"After this, one should edit the config.yml file and edit the appropiate values,\nplease read below about how to do that. "),(0,i.kt)("p",null,"For the slave machine (for example ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2"),") one would copy the config.yml\nfrom ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1")," and not change the the passwords with the ",(0,i.kt)("inlineCode",{parentName:"p"},"manage_config_pwd.py"),"\nscript. "),(0,i.kt)("p",null,"Even for the election authorities' machines, it's easiest to just copy the\n",(0,i.kt)("inlineCode",{parentName:"p"},"config.yml")," file from ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1")," and use it as a base. However, we provide\nsample production config files for both sequent and auth machines in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"doc/production")," directory."),(0,i.kt)("h2",{id:"web-servers-master--slave-deployment"},"Web servers master & slave deployment"),(0,i.kt)("p",null,"Both machines prod-s1 and prod-s2 should be setup with the same passwords,\nbecause they will be a replica of each other: the slave will be in hot standby\nconfiguration. The only difference between the configuration file of ",(0,i.kt)("inlineCode",{parentName:"p"},"pro-s1"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2")," should be the following config keys:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"config.hostname"),(0,i.kt)("li",{parentName:"ul"},"config.public_ipaddress"),(0,i.kt)("li",{parentName:"ul"},"config.private_ipaddress"),(0,i.kt)("li",{parentName:"ul"},"config.load_balancing.repmgr_node_id")),(0,i.kt)("p",null,"Please read the comments and instructions inside the configuration file\nand accordingly. Both machines for deploy purposes should have the\n",(0,i.kt)("strong",{parentName:"p"},"config.load_balancing.is_master")," set to ",(0,i.kt)("strong",{parentName:"p"},"true")," and The\n",(0,i.kt)("strong",{parentName:"p"},"config.load_balancing.master.slave_postgres_ssh_keys")," and\n",(0,i.kt)("strong",{parentName:"p"},"config.load_balancing.master.slave_ballotbox_ssh_keys")," set to ",(0,i.kt)("strong",{parentName:"p"},"[]"),"\n(which means empty list) at this stage of deployment."),(0,i.kt)("p",null,"If your machine is behind a proxy, you need to specify that in the\n",(0,i.kt)("strong",{parentName:"p"},"config.has_https_proxy")," variable."),(0,i.kt)("p",null,"After setting the configuration, you should set the playbook that we will use\nfor deploying as master the machines, we already configured the inventory for\ndeploying locally. The next step is to deploy with ansible:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"date; time ansible-playbook -i inventory playbook.yml; date\n")),(0,i.kt)("p",null,"Once this is done, the initial as-master deployment has been successful."),(0,i.kt)("p",null,"If you have assigned a FQDN to for example 'sequent.example.com' to the machine\nand the name resolution is set up correctly in your personal machine via DNS or\nby adding 'sequent.example.com ipaddr' to your '/etc/hosts', you should be able to login\nas an administrator entering in '",(0,i.kt)("a",{parentName:"p",href:"https://sequent.example.com/admin/login'"},"https://sequent.example.com/admin/login'")," using\nthe credentials you specified in the config.yml file."),(0,i.kt)("p",null,"We recommend to use the /etc/hosts file to change the ip address of the\nwebserver from prod-s1 to prod-s2 ip easily for testing purposes."),(0,i.kt)("h3",{id:"configure-the-slave"},"Configure the slave"),(0,i.kt)("p",null,"To configure prod-s2 as a slave, we need to import the ssh keys from the\nballotbox and postgres users in ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"em"},"prod-s1"))," to add them in *",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2"),"."),(0,i.kt)("p",null,"To get the keys execute these commands in ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"em"},"prod-s2")),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo -u ballotbox cat /home/ballotbox/.ssh/id_rsa.pub\nsudo -u postgres cat /var/lib/postgresql/.ssh/id_rsa.pub\n")),(0,i.kt)("p",null,"Copy those keys and set them in the ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1")," ",(0,i.kt)("strong",{parentName:"p"},"config.yml")," file in\nthe variables ",(0,i.kt)("strong",{parentName:"p"},"config.load_balancing.master.slave_ballotbox_ssh_keys"),"\nand ",(0,i.kt)("strong",{parentName:"p"},"config.load_balancing.master.slave_postgres_ssh_keys"),"."),(0,i.kt)("p",null,"Then, execute again ansible in ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"em"},"prod-s1"))," to apply the changes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"date; time ansible-playbook -i inventory playbook.yml; date\n")),(0,i.kt)("p",null,"After that, then you can change the ",(0,i.kt)("strong",{parentName:"p"},"config.yml")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2")," to set\nthe variable ",(0,i.kt)("strong",{parentName:"p"},"config.load_balancing.is_master")," to ",(0,i.kt)("strong",{parentName:"p"},"false"),",\n",(0,i.kt)("strong",{parentName:"p"},"config.load_balancing.slave.master_hostname")," to the hostname of ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1"),"\nand ",(0,i.kt)("strong",{parentName:"p"},"config.load_balancing.repmgr_node_id")," to ",(0,i.kt)("strong",{parentName:"p"},"2"),"."),(0,i.kt)("p",null,"If your machine is behind a proxy, you need to specify that in the\n",(0,i.kt)("strong",{parentName:"p"},"config.has_https_proxy")," variable."),(0,i.kt)("p",null,"Then you can run again ansible in ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2")," to apply the changes, using the\nslave specific playbook, which can only work after having executed\n",(0,i.kt)("strong",{parentName:"p"},"playbook.sequent.yml"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"root@prod-s2:/root/prod-s2/ $ cp doc/production/playbook.slave.yml playbook.yml\nroot@prod-s2:/root/prod-s2/ $ time sudo ansible-playbook -i inventory playbook.yml\n")),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"#high-availability-and-load-balancing-halb"},"High availability and load balancing (HA/LB)"),"\nsection to see more information about how to check if everything is working\nand how to promote the slave to be master and also change it back to be a slave."),(0,i.kt)("h2",{id:"deployment-of-authorities"},"Deployment of authorities"),(0,i.kt)("p",null,"Please follow the steps of the ",(0,i.kt)("a",{parentName:"p",href:"#for-each-machine"},"For Each Machine section")," to\ndo the initial provisioning and configuration of the election authorities,\nprod-a1, prod-a2. Afterwards, continue reading this section."),(0,i.kt)("p",null,"We'll use an authority config file as a base:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"root@prod-a1:/root/prod-a1/ $ cp doc/production/config.auth.yml config.yml\n")),(0,i.kt)("p",null,"Edit the config.yml file following the instructions inside. Specifically, don't forget to edit:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"config.hostname"),(0,i.kt)("li",{parentName:"ul"},"config.public_ipaddress"),(0,i.kt)("li",{parentName:"ul"},"config.private_ipaddress"),(0,i.kt)("li",{parentName:"ul"},"config.hosts")),(0,i.kt)("p",null,"In particular, you need to ensure that the FQDN points to the private network\nIP Address of the master machine using config.hosts, using a configuration\nsimilar to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"hosts:\n- hostname: demo.example.com\n  ip: 192.168.50.14 # this should be the ip of the new master\n")),(0,i.kt)("p",null,"Note that the above is required only if the authority is in a private network\nand cannot reach to this web server using the public ip address."),(0,i.kt)("p",null,"Then deploy as usual:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"root@prod-a1:/root/prod-a1/ $ date; time ansible-playbook -i inventory playbook.yml; date\n")),(0,i.kt)("h3",{id:"connecting-authorities"},"Connecting authorities"),(0,i.kt)("p",null,"Authorities communicate with other authorities using ssl and client\ncertificates so the authority server doesn't accept queries from unknown\nservers. In a real election system it's a good idea to not publish the ips\nand ports of the authorities to avoid malicious attacks."),(0,i.kt)("p",null,"The deployment script creates a certificate for each authority in\n/srv/cert/selfsigned/ and we manage the authority communication and\ncertificate sharing with the eopeers tool."),(0,i.kt)("p",null,"Execute the following in ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-a1"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"root@prod-a1:/root/prod-a1/ $ eopeers --show-mine\n")),(0,i.kt)("p",null,"Copy the output to a file in ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-a2"),", then install it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"root@prod-a2:/root/prod-a2/ $ eopeers --install prod-a1.pkg\nroot@prod-a2:/root/prod-a2/ $ service nginx restart\n")),(0,i.kt)("p",null,"Then do the same the other way around:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"root@prod-a1:/root/prod-a1/ $ eopeers --show-mine\nroot@prod-a1:/root/prod-a1/ $ eopeers --install prod-a2.pkg\nroot@prod-a1:/root/prod-a1/ $ service nginx restart\n")),(0,i.kt)("h3",{id:"test-the-connection-between-the-authorities"},"Test the connection between the authorities"),(0,i.kt)("p",null,"A tool is installed to test the real connection between the authorities.\nOpen two terminal windows.  Open ",(0,i.kt)("inlineCode",{parentName:"p"},"eolog")," in one of the terminal windows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"root@prod-a1:/root/prod-a1/ $ sudo eolog\n")),(0,i.kt)("p",null,"Run eotest in the other terminal window from the other auth server:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"root@prod-a1:/root/prod-a1/ $ eotest full --vmnd --vcount 100 --peers prod-a2\n")),(0,i.kt)("p",null,"You should see the software working as eolog output will appear in the\nfirst terminal window. Once it the eotest command finishes, you can also close\nprod-a2 connection to eolog. Congratulations, you have run a complete test\nbetween the two authorities in which:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Create:")," Election public and private keys have been created."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Encrypt:")," Test ballots have been created and encrypted."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Tally:")," Those encrypted votes have been mixed and decrypted.")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"eotest")," command is useful to test election authorities. You can change the\nnumber of votes to use in the test using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--vcount"),"  option. In our example\nabove we used 100 votes, but you could tally 100,000 or any other number. This\ncan help you find out how much time the tally would take and if the authority\nmachine configuration and hardware would work with a specific number of votes."),(0,i.kt)("p",{parentName:"div"},"By default eotest uses all connected authorities, but you can also specify with\nwhich other authorities you want to do the test using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--peers")," option.\nYou can execute each of the steps individually using ",(0,i.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"encrypt")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"tally")," options instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"full"),". Find more information with ",(0,i.kt)("inlineCode",{parentName:"p"},"eotest --help"),"."))),(0,i.kt)("h3",{id:"connecting-web-servers-with-authorities"},"Connecting web servers with authorities"),(0,i.kt)("p",null,"The following commands should be executed in both ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2"),"\nmachines:"),(0,i.kt)("p",null,"Create ",(0,i.kt)("strong",{parentName:"p"},"prod-a1.pkg")," and ",(0,i.kt)("strong",{parentName:"p"},"prod-a2.pkg")," files with the configuration of both\nauthorities. Then install them:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"root@prod-s1:/root/prod-s1/ $ eopeers --install prod-a1.pkg --keystore /home/ballotbox/keystore.jks\nroot@prod-s1:/root/prod-s1/ $ eopeers --install prod-a2.pkg\nroot@prod-s1:/root/prod-s1/ $ service nginx restart\nroot@prod-s1:/root/prod-s1/ $ supervisorctl restart ballot-box\n")),(0,i.kt)("p",null,"Please note that there's a difference between the first two eopeers commands.\nThe first one is configured to be executed to add the key to ballot-box\nkeystore for the director authority ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-a1"),". Afterwards, we need to restart\nnot only ",(0,i.kt)("inlineCode",{parentName:"p"},"nginx")," but also ",(0,i.kt)("inlineCode",{parentName:"p"},"ballot-box")," precisely because this service needs\nto reload the `",(0,i.kt)("inlineCode",{parentName:"p"},"prod-a1")," TLS certificate keys."),(0,i.kt)("p",null,"Before completion, the installation of the certificate of the ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2"),' servers needs to be installed in the election authorities, because\neven though i\'ts the same TLS cert, they have different hostnames. So copy\nthem (get it with "eopeers --show-mine") to the authorities and install them:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"root@prod-a1:/root/prod-a1/ $ eopeers --install prod-s1.pkg\nroot@prod-a1:/root/prod-a1/ $ eopeers --install prod-s2.pkg\nroot@prod-a1:/root/prod-a1/ $ service nginx restart\n")),(0,i.kt)("h2",{id:"create-a-test-election"},"Create a test election"),(0,i.kt)("p",null,"Go to https://prod-s1/admin/login and create a test election. Then execute\nthe following to create some votes. Change '2' in the following commands with\nyour election number:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"root@prod-s1:/root/prod-s1/ $ su - ballotbox\nballotbox@prod-s1:~ $ source ~/env/bin/activate\nballotbox@prod-s1:~ $ cd ~/ballot-box/admin\nballotbox@prod-s1:~ $ export ELECTION_ID=2\nballotbox@prod-s1:~/ballot-box/admin/ $ ./admin.py dump_pks $ELECTION_ID\nballotbox@prod-s1:~/ballot-box/admin/ $ echo '[1,0]' > votes.json\nballotbox@prod-s1:~/ballot-box/admin/ $ ./admin.py encrypt $ELECTION_ID\n")),(0,i.kt)("p",null,"start the election, cast the votes, stop it and tally it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'ballotbox@prod-s1:~/ballot-box/admin/ $ ./admin.py start $ELECTION_ID\nballotbox@prod-s1:~/ballot-box/admin/ $ ./admin.py cast_votes $ELECTION_ID\nballotbox@prod-s1:~/ballot-box/admin/ $ ./admin.py count_votes $ELECTION_ID \n# it will output: "2 (2)" which means 2 votes cast, 2 unique voters\nballotbox@prod-s1:~/ballot-box/admin/ $ ./admin.py stop $ELECTION_ID\nballotbox@prod-s1:~/ballot-box/admin/ $ ./admin.py tally $ELECTION_ID\n')),(0,i.kt)("h2",{id:"high-availability-and-load-balancing-halb"},"High availability and load balancing (HA/LB)"),(0,i.kt)("p",null,"Sequent platform can be configured to support both load balancing and high\navailability, using a master-slaves configuration."),(0,i.kt)("p",null,"High availability means that the slaves contain a replica of the master, so in\nthe event of the master machine failing, one of the slaves can take over by\nbeing promoted to master. This is a process that currently have to be executed\nmanually following the steps in the\n",(0,i.kt)("a",{parentName:"p",href:"#promoting-a-slave-to-be-master"},"Promoting a slave to be master")," section."),(0,i.kt)("p",null,"Load balancing allows to partially scale horizontally, allowing to serve more\nhttp requests per second. Sequent platform allows to perform load balancing only\nin the web servers (",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2"),", etc) but not in the election authority\nservers (",(0,i.kt)("inlineCode",{parentName:"p"},"prod-a1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-a2"),", etc). For scaling election authorities, currently\nthe only way to do it is either subdividing an electoral process in multiple\nelections with different election authority servers, or scaling vertically the\nelection authorities by adding more CPU/RAM/Disk resources to these machines."),(0,i.kt)("p",null,"The way Sequent deploys the master and the slave means that the master\n(",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1")," in this guide) has the readwrite instance of the PostgreSQL database\nand the slaves (",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2"),") have only a read-only database replica."),(0,i.kt)("p",null,"However, other than that, all the backend services are replicated in both master\nand slaves machines (",(0,i.kt)("inlineCode",{parentName:"p"},"iam"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"iam_celery"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ballot-box")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"nginx"),").\n",(0,i.kt)("inlineCode",{parentName:"p"},"ballot-box")," uses ",(0,i.kt)("inlineCode",{parentName:"p"},"memcached")," to cache queries and improve performance, and\nall slaves connect directly to the ",(0,i.kt)("inlineCode",{parentName:"p"},"memcached")," instance of the master machine."),(0,i.kt)("p",null,"On the other hand, there are currently some limitations on the load balancing:\n",(0,i.kt)("inlineCode",{parentName:"p"},"iam"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"iam_celery")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ballot-box")," connect directly to the master\nPostgreSQL instance, and no load balancing is performed in the database level,\nonly at the application level."),(0,i.kt)("p",null,"Finally, ",(0,i.kt)("inlineCode",{parentName:"p"},"iam_celery")," uses ",(0,i.kt)("inlineCode",{parentName:"p"},"RabbitMQ")," as its broker to manage messages and\nqueues. Each server, independing of it being a master or a slave, currently\nruns its own ",(0,i.kt)("inlineCode",{parentName:"p"},"RabbitMQ")," queue. That means that a task to send an SMS message\nscheduled by ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1")," will only be run by ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1"),", and same for any other\nserver (for example ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2"),")."),(0,i.kt)("h3",{id:"checking-the-cluster"},"Checking the cluster"),(0,i.kt)("p",null,"The master/slave configuration in this configuration basically means that:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"prod-s2")," is a server that is replicating in a hot standby mode the database\nof ",(0,i.kt)("inlineCode",{parentName:"li"},"prod-s1"),". "),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"prod-s2")," has also replicated everything needed to be able to change the\nserver from slave to master at any time.")),(0,i.kt)("h3",{id:"checking-that-the-slave-works-using-a-load-balancer"},"Checking that the slave works using a Load Balancer"),(0,i.kt)("p",null,"One simple way to test that the slave machines work is simply using a load\nbalancer. You can deregister the master from the load balancer, and then only\nthe slave machines will receive requests. You can check that this is true\nby watching the logs of ",(0,i.kt)("inlineCode",{parentName:"p"},"nginx"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ballot-box"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"iam")," in both\nmachines, and checking that only the slave is receiving requests with the\nfollowing commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"supervisorctl tail -f ballot-box\nsupervisorctl tail -f iam\ntail -F /var/log/nginx/access.log\n")),(0,i.kt)("p",null,"Note that you can configure the load balancer to establish a health check to\nthe PATH ",(0,i.kt)("inlineCode",{parentName:"p"},"/admin-api/iam/api/auth-event/1/"),". This should return a HTTP\nstatus 200 through TLS and port 443, when iam is running."),(0,i.kt)("h4",{id:"checking-database-replication"},"Checking database replication"),(0,i.kt)("p",null,"You can also test that the database replication is working both ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1")," that the following command has this kind of output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo -u postgres /usr/lib/postgresql/12/bin/repmgr -f /etc/repmgr/repmgr.conf cluster show\n\n ID | Name        | Role    | Status    | Upstream    | Location | Priority | Timeline | Connection string\n----+-------------+---------+-----------+-------------+----------+----------+----------+--------------------------------------------\n 1  | prod-s1     | primary | * running |             | default  | 100      | 1        | host=prod-s1 user=repmgr dbname=repmgr\n 2  | prod-s2     | standby |   running | prod-s1     | default  | 100      | 1        | host=prod-s2 user=repmgr dbname=repmgr\n")),(0,i.kt)("p",null,"Execution in either of them should result in the same results. Additionally, you\ncan verify that any change in the database in ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1")," is reflected in\n",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2"),". For example, if you have created elections using the UI or otherwise,\nthey should appear in both machines:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'sudo -u postgres psql ballot-box -tAc "select id,state from election;"\n5001|registered\n5002|registered\n5003|registered\n5005|results_ok\n')),(0,i.kt)("h4",{id:"checking-certificates-and-public-keys-synchronization"},"Checking certificates and public keys synchronization"),(0,i.kt)("p",null,"If you list the files inside the datastore and the server certificate in\nboth ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2"),", it should list the same files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"root@prod-s1:/root/prod-s1/ $ sudo -u ballotbox find /home/ballotbox/datastore/ -type f | xargs md5sum\n05b76ec89dd7a32b76427d389a5778c1  /home/ballotbox/datastore/public/2/pks\n\nroot@prod-s1:/root/prod-s1/ $ find /srv/certs/selfsigned/ -type f | xargs md5sum\nd811c3e92162ade25f21f1d782f32c6e  /srv/certs/selfsigned/calist\n54a67dfe2a9fde364a833135d9bfdd3b  /srv/certs/selfsigned/key-nopass.pem\na9bf327511b67100c096aebed5b46c94  /srv/certs/selfsigned/cert.pem\n")),(0,i.kt)("h4",{id:"checking-memcached-configuration"},"Checking memcached configuration"),(0,i.kt)("p",null,"Memcached is a service used by ",(0,i.kt)("inlineCode",{parentName:"p"},"ballot-box")," to cache data to avoid hitting\nthe database and improve performance. Only master's memcached instance is used.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"ballot-box")," process in the slave machines will connect to it."),(0,i.kt)("p",null,"You can review the following:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"1. Check that the memcached service is running in the master (",(0,i.kt)("inlineCode",{parentName:"strong"},"prod-s1"),")")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"service memcached status\n\n\u25cf memcached.service - memcached daemon\n     Loaded: loaded (/lib/systemd/system/memcached.service; enabled; vendor preset: enabled)\n     Active: active (running) since Thu 2021-12-02 08:32:13 CET; 3h 37min ago\n       Docs: man:memcached(1)\n   Main PID: 219127 (memcached)\n      Tasks: 10 (limit: 4693)\n     Memory: 1.5M\n     CGroup: /system.slice/memcached.service\n             \u2514\u2500219127 /usr/bin/memcached -m 64 -p 11211 -u memcache -l 127.0.0.1,172.31.43.83 -P /var/run/memcached/memcached.pid\n\nDec 02 08:32:13 test-500-s1 systemd[1]: Started memcached daemon.\n")),(0,i.kt)("p",null,"Note that the memcached process is listening on (UDP) port 11211 for both local\n(127.0.0.1) and the private IP of the master machine (in this example,\n172.31.43.83)."),(0,i.kt)("p",null,"Remember that as described in the\n",(0,i.kt)("a",{parentName:"p",href:"#network-firewall--dns"},"Network, firewall & DNS")," section, UDP Port 11211 needs\nto be open in the private network between the servers for memcached to work\nproperly."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"2. Check the statistics of the memcached within the master")),(0,i.kt)("p",null,"You can see some statistics of the master machine with memcache-top:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/eculver/memcache-top.git\nperl memcache-top/memcache-top --instances=127.0.0.1\nmemcache-top v0.7       (default port: 11211, color: on, refresh: 3 seconds)\n\nINSTANCE                USAGE   HIT %   CONN    TIME    ITEMS   EVICT/s READ/s  WRITE/s\n127.0.0.1:11211         0.0%    0.0%    4       1.3ms           0.0     2       639\n\nAVERAGE:                0.0%    0.0%    4       1.3ms           0.0     2       639\n\nTOTAL:          0B/     64.0MB          4       1.3ms           0.0     2       639\n(ctrl-c to quit.)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"3. Check conectivity to master from a slave machine")),(0,i.kt)("p",null,"You can use again memcached-top to see if you can connect to the master\n(",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1"),") from the slave machine (",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2"),"), executing memcached-top in\nthe slave (",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/eculver/memcache-top.git\nperl memcache-top/memcache-top --instances=prod-s1\nmemcache-top v0.7       (default port: 11211, color: on, refresh: 3 seconds)\n\nINSTANCE                USAGE   HIT %   CONN    TIME    ITEMS   EVICT/s READ/s  WRITE/s\nprod-s1:11211           0.0%    0.0%    4       1.3ms           0.0     2       639\n\nAVERAGE:                0.0%    0.0%    4       1.3ms           0.0     2       639\n\nTOTAL:          0B/     64.0MB          4       1.3ms           0.0     2       639\n(ctrl-c to quit.)\n")),(0,i.kt)("p",null,"If the connection to ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1")," had not been working, it would have shown\nsomething like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"perl memcache-top/memcache-top --instances=prod-s1\nmemcache-top v0.7       (default port: 11211, color: on, refresh: 3 seconds)\n\nINSTANCE                USAGE   HIT %   CONN    TIME    ITEMS   EVICT/s READ/s  WRITE/s\ntest-500-s3:11211 is DOWN.\n\nAVERAGE:                0.0%    0.0%            0.0ms           0.0     0       0\n\nTOTAL:          0B/     0B                      0.0ms           0.0     0       0\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"4. Check the correct configuration of ",(0,i.kt)("inlineCode",{parentName:"strong"},"ballot-box")," in both master and slaves")),(0,i.kt)("p",null,"You can check that memcached is being properly configured in `ballot-box``\nin both the master:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'grep memcache /home/ballotbox/ballot-box/conf/application.local.conf -C 1\n\n# memcached\nehcacheplugin=disabled\nmemcached.host="127.0.0.1:11211"\nlogger.memcached=WARN\n')),(0,i.kt)("p",null,"And within the slave:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'grep memcache /home/ballotbox/ballot-box/conf/application.local.conf -C 1\n\n# memcached\nehcacheplugin=disabled\nmemcached.host="prod-s1:11211"\nlogger.memcached=WARN\n')),(0,i.kt)("h3",{id:"promoting-a-slave-to-be-master"},"Promoting a slave to be master"),(0,i.kt)("p",null,"In this example we would be:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Creating an election in ",(0,i.kt)("inlineCode",{parentName:"li"},"prod-s1"),"."),(0,i.kt)("li",{parentName:"ol"},"Casting some votes."),(0,i.kt)("li",{parentName:"ol"},"Promoting the ",(0,i.kt)("inlineCode",{parentName:"li"},"prod-s2")," to master."),(0,i.kt)("li",{parentName:"ol"},"Continue casting votes."),(0,i.kt)("li",{parentName:"ol"},"Sucessfully tally the election.")),(0,i.kt)("p",null,"We'll be asuming you know how to perform steps 1 and 2."),(0,i.kt)("h4",{id:"step-3-promoting-the-prod-s2-to-master"},"Step 3: Promoting the ",(0,i.kt)("inlineCode",{parentName:"h4"},"prod-s2")," to master"),(0,i.kt)("p",null,"You should first ensure that now ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1")," is either demoted to be configured\nas a slave or is not receiving any more requests from the client. Otherwise, you\ncould end up with two different servers acting as Database Masters, and thus\nwith some votes arriving to one server and not in the other. You don't want\nthat."),(0,i.kt)("p",null,"Thus, if you are using a load balancer, configure it to prevent ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1")," from\nreceiving votes. Otherwise, you could point voters to ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2")," reassigning the\npublic IP of the server ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s1")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2"),", or something along the lines."),(0,i.kt)("p",null,"Afterwards, to promote ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2")," to be the master, change set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," the\n",(0,i.kt)("inlineCode",{parentName:"p"},"config.yml")," config variable ",(0,i.kt)("inlineCode",{parentName:"p"},"config.load_balancing.is_master"),", and then execute\nansible for ",(0,i.kt)("inlineCode",{parentName:"p"},"prod-s2")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"playbook.sequent.yml")," playbook:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"date; time ansible-playbook -i inventory playbook.yml; date\n")),(0,i.kt)("h4",{id:"step-4-continue-casting-votes"},"Step 4: Continue casting votes"),(0,i.kt)("p",null,"Once step 3 is done, you can continue casting the votes normally if needed."),(0,i.kt)("h4",{id:"step-5-run-the-tally"},"Step 5: Run the tally"),(0,i.kt)("p",null,'To be able to receive successfully the tally, prod-s2 needs to "impersonate"\nprod-s1 as the director election authority. This can be done by:'),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"removing the prod-s1 eopeer package:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sequent@prod-a1:~ $ sudo eopeers --remove prod-s1\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"adding an alias to /etc/hosts in ",(0,i.kt)("inlineCode",{parentName:"li"},"prod-a1")," config.yml variable ",(0,i.kt)("strong",{parentName:"li"},"config.hosts"),",\nsetting it to something like:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"hosts:\n- hostname: prod-s1\n  ip: 192.168.50.14 # this should be the ip of the new master\n")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"re-executing ansible in ",(0,i.kt)("inlineCode",{parentName:"li"},"prod-a1"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"date; time ansible-playbook -i inventory playbook.yml; date\n")),(0,i.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,i.kt)("h3",{id:"problems-when-creating-the-election"},"Problems when creating the election"),(0,i.kt)("p",null,"This is usually a problem with election authorities. Unfortunately, most of the\nissues related to election authorities do not get reported to the user nor the\nsuperadmins, although it's also true that most of these issues are solved when\ndoing the deployment."),(0,i.kt)("p",null,"To debug and analyze the situation, you can use the following commands in the\nelection authorities or the sequent server:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"See if the requests are reaching to nginx reading its log:"),(0,i.kt)("p",{parentName:"li"},"$ sudo tail -f /var/log/nginx/access.log"))),(0,i.kt)("p",null,'nginx is in charge of filtering and accepting only https requests from http\nclients (i.e. other "eopeers" or "sequent" servers) whose client tls certificate\nis installed in the peer.'),(0,i.kt)("p",null,"If requests are being received but rejected with status 401 Unauthorized, it's\nusually because:"),(0,i.kt)("p",null,"a) the client TLS certificate has not been correctly installed, in which case\nyou just need to install the eopeer package (and restart nginx)"),(0,i.kt)("p",null,"b) the client TLS certificate has correctly been installed, but it hasn't been\napplied because you forgot to restart nginx with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ service nginx restart\n")),(0,i.kt)("p",null,"If on the other hand the requests are reaching to nginx but somehow are not\nbeing processed, this is usually because previously an error happened during the\nprocessing of an action of an election and the processing of the action was\nnever marked to a finished state, and election-orchestra is configured to\nexecute only one task at once. There's an easy way to solve this isssue; just\nrestart election-orchestra:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ supervisorctl restart eorchestra\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"You should also take a look at election-orchestra log:"),(0,i.kt)("p",{parentName:"li"},"$ sudo supervisorctl tail -f eorchestra"))),(0,i.kt)("p",null,"election-orchestra is the software that organizes the creation of the keys\nand the tallying of the election inside election authority servers,\ncommunicating with other authorities and the sequent servers."),(0,i.kt)("p",null,"You might find this kind of error in the eorchestra log:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"ConnectionError: HTTPConnectionPool(host='sequent', port=14443): Max retries exceeded with url: /api/election/103/keydone (Caused by <class 'socket.error'>: [Errno 110] Connection timed out)\n")),(0,i.kt)("p",null,"This happens when election keys have been created, but the last step, which is\nto send the public keys to the requester sequent server, has failed. This might\nhave happened because the sequent TLS certificate is correctly installed (with\nthe peer package), but the ip address in the peer package was invalid, for\nexample because the communication with the sequent server should be through its\nprivate ip-address and it's been configured to be done through its public ip, or\nviceversa. If it's the former, what you'd do is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"# generate the correct sequent peer package, with the private ip address\nsequentServer $ sudo eopeers --show-mine --private > sequent.pkg\n\n# copy the sequent peer package to the election authorities\nscp blah blah\n\n# uninstall the old sequent peer package, install the new one and reinstall\n# nginx\nauthX $ sudo eopeers --uninstall sequent\nauthX $ sudo eopeers --install sequent.pkg && sudo service nginx restart\n")),(0,i.kt)("p",null,'An alternative way of correcting the ip-address issue is to just add another\nalias directly in /etc/hosts. This can be done in the deployment config.yml file\nin the "config.hosts" variable.'),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Take a look at ballot-box log:"),(0,i.kt)("p",{parentName:"li"},"$ sudo supervisorctl tail -f ballot-box"))),(0,i.kt)("p",null,"ballot-box is the application run in sequent web servers that is in charge of\ncollecting cast ballots (the electronic ballot box) and also connecting with\nelection authorities to trigger the creation of election keys and launching\nthe tally."),(0,i.kt)("p",null,"When you launch an election, it might inmmediatly fail if the sequent web server\ndoesn't have the election eopeer packages correctly installed. Please check\nthat:"),(0,i.kt)("p",null,"a) The authority packages are installed with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ sudo eopeers --list\n")),(0,i.kt)("p",null,"b) The authority packages are installed with the correct ip-addresses. Bear in\nmind that they might be installed with the public-ip address and maybe they\nshould be installed with the public ip address or viceversa. You can see a peer\npackage installed ip-address with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ sudo eopeers --list <NAME>\n")),(0,i.kt)("p",null,'c) check that the director authority peer package, which is the authority that\norchestrates the communication with other authorities, has been installed with\nthe eopeers "--keystore /home/ballotbox/keystore.jks" parameter. This is\nneeded because the TLS certificate of this authority needs to be accessible not\nonly to nginx but also directly to ballot-box.'),(0,i.kt)("p",null,'Also, if you ever need to uninstall the peer package of this election authority,\nremember to do --uninstall with the\n"--keystore /home/ballotbox/keystore.jks" parameter.'),(0,i.kt)("p",null,"d) Check that you have restarted both nginx and ballot-box if you have\nchanged any peer package:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ sudo supevisorctl restart ballot-box && sudo service nginx restart\n")),(0,i.kt)("p",null,'e) Check that the list of election authorities are correctly configured in\nballot-box in the file\n/home/ballotbox/ballot-box/conf/application.local.conf. This is\n/configured during deployment in the "config.authorities", "config.director" and\n"config.auths" variables in "config.yml".'),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"Bear in mind that if you are using a production environment deployment, you\nwill have two or more front-end web servers with ballot-box. This means\nthat any of these servers might connect with the election authorities. The\nconfiguration of the election authorities in that case is that one of them is\ndeemed to be the master sequent server, and even though any of those sequent servers\n(with different private ip addresses) might be the initiator of a request to\nthe director election authority, the callback url will always point to the\nsame master sequent server ip address. Also, note that the TLS certificate of\nall the sequent servers will be the same.")),(0,i.kt)("h3",{id:"the-election-tally-never-succeeds"},"The election tally never succeeds"),(0,i.kt)("p",null,"a) If the election public keys are correctly created, this means that the\nconnection between election authorities and the sequent servers are usually all\nok; except for a couple things:"),(0,i.kt)("p",null,'This usually happens when an election authority that is not the director\nelection authority hasn\'t got correctly configured the ip address or TLS\ncertificate of the sequent server, and thus it has failed to download the list of\nballots from that server. This can be checked looking at the "eorchestra" log\nin that election authority:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"authX $ sudo supervisorctl tail -f eorchestra\n")),(0,i.kt)("p",null,"Or taking a look at nginx log in the sequent server, in which the request would\nnot reach because it's going to another ip address:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ sudo tail -f /var/log/nginx/access.log\n")),(0,i.kt)("p",null,"Note that this issue can also happen if in the sequent server's nginx log the\nrequest is logged (and thus the server is being reached) but with status\n401 Unauthorized because the sequent web server hasn't got properly configured\nthe TLS certificate of that election authority. The TLS certificate is included\nin the peer package of the election authority."),(0,i.kt)("p",null,"To solve peer packages problems, see section 1."),(0,i.kt)("p",null,"b) If there is an error during the tally of plaintexts of the ballots (i.e.\nafter the anonymization and decryption step done by the election authorities)."),(0,i.kt)("p",null,"In some rare cases, if there's an issue in tally-pipes configuration or a bug\nin tally-pipes or tally-methods, this might happen. To detect this issue, take\na look at the log in ballot-box when receiving the plaintexts of the\nballots when calculating the tally:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sequent $ sudo supervisorctl tail -f ballot-box\n")),(0,i.kt)("h3",{id:"supervisor-is-not-running"},"Supervisor is not running"),(0,i.kt)("p",null,"If the login page (/admin/login) loads but the form doesn't show up, and when\nyou analyze traffic some queries (for example  https://sequent/iam/api/auth-event/1/) return\n\"502 Bad Gateway\", this might be because supervisor is dead. This is a bug\nthat we don't know how to fix yet but has a simple solution: restart supervisor:"),(0,i.kt)("p",null,"You can check that supervisor is down when this happens:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ cd sequent\nsequent $ vagrant ssh -c "sudo supervisorctl status"\n\n    unix:///var/run/supervisor.sock no such file\n    Connection to 127.0.0.1 closed.\n')),(0,i.kt)("p",null,"If that's the case, restart it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ cd sequent\nsequent $ vagrant ssh -c "sudo /etc/init.d/supervisor* restart"\n')),(0,i.kt)("p",null,"Afterwards, supervisor status should return something like this, which is ok:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ cd sequent\nsequent $ vagrant ssh -c "sudo supervisorctl status"\n\n    ballot-box                  RUNNING    pid 7665, uptime 0:00:04\n    iam                          RUNNING    pid 7663, uptime 0:00:04\n    iam_celery                   RUNNING    pid 7667, uptime 0:00:04\n    sentry                           RUNNING    pid 7664, uptime 0:00:04\n    sentry_celery                    RUNNING    pid 7666, uptime 0:00:04\n    Connection to 127.0.0.1 closed.\n')),(0,i.kt)("h3",{id:"problems-provisioning"},"Problems provisioning"),(0,i.kt)("p",null,"Sometimes the provisioning fails. This can be related to some syntax changes on\nansible's playbooks format. Check that you have Ansible 2.x or superior. If you\nare using vagrant to provision a virtual machine, you need to install ansible 2.x\non the host machine, not on the guest."),(0,i.kt)("p",null,"On Ubuntu, you can install the latest version of Ansible by executing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ sudo apt-get install software-properties-common pwgen -y\n$ sudo apt-add-repository ppa:ansible/ansible -y\n$ sudo apt-get update\n$ sudo apt-get install ansible -y\n")),(0,i.kt)("h3",{id:"issues-deploying-high-availability--load-balancer"},"Issues deploying High Availability / Load Balancer"),(0,i.kt)("p",null,"If you encounter the following issue when deploying:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'fatal: [localhost]: FAILED! => {"changed": true, "cmd": "/usr/lib/postgresql/9.4/bin/repmgr -f /etc/repmgr/repmgr.conf master register", "delta": "0:00:00.009032", "end": "2020-12-30 10:16:05.318695", "failed_when_result": true, "msg": "non-zero return code", "rc": 6, "start": "2020-12-30 10:16:05.309663", "stderr": "[2020-12-30 10:16:05] [ERROR] connection to database failed: fe_sendauth: no password supplied", "stderr_lines": ["[2020-12-30 10:16:05] [ERROR] connection to database failed: fe_sendauth: no password supplied"], "stdout": "", "stdout_lines": []}\n')),(0,i.kt)("p",null,"It's usually related to a misconfiguration of the ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/hosts")," file. Please\nverify that when you execute within the deployed machine ",(0,i.kt)("inlineCode",{parentName:"p"},"ping <machine-name>"),"\nit should be answering with the private ip address you configured in\n",(0,i.kt)("inlineCode",{parentName:"p"},"config.private_ipaddress"),". Edit ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/hosts")," to fix that if it is not."),(0,i.kt)("h3",{id:"correctly-recreating-the-tls-certificate"},"Correctly recreating the TLS certificate"),(0,i.kt)("p",null,"Sometimes a misconfiguration of the ",(0,i.kt)("inlineCode",{parentName:"p"},"config.hostname")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"config.ballot-box.domain")," deployment variables happen. For example, you\nmight have used the wrong DNS or hostname by error, or maybe you need to change\nit to their new value(s). "),(0,i.kt)("p",null,"Here we will document what needs to be done depending on the type of machine\nthat is affected if this happens. "),(0,i.kt)("p",null,"Please review the ",(0,i.kt)("a",{parentName:"p",href:"./guide#connecting-authorities"},"Connecting Authorities section"),"\nof the ",(0,i.kt)("a",{parentName:"p",href:"./guide"},"deployment guide")," to understand the general procedures when connecting\nthe authorities and the sequent servers."),(0,i.kt)("h4",{id:"for-an-election-authority"},"For an election authority"),(0,i.kt)("p",null,"You need to set the ",(0,i.kt)("inlineCode",{parentName:"p"},"config.yml")," variables (",(0,i.kt)("inlineCode",{parentName:"p"},"config.hostname")," and/or\n",(0,i.kt)("inlineCode",{parentName:"p"},"config.ballot-box.domain"),") to their new value."),(0,i.kt)("p",null,"You also need to set the ",(0,i.kt)("inlineCode",{parentName:"p"},"config.cert.force_create")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"'true'")," and re-deploy.\nThis will force regeneration of the TLS self-signed certificate of the machine.\nAfter redeploying, it's ",(0,i.kt)("strong",{parentName:"p"},"important")," to set back ",(0,i.kt)("inlineCode",{parentName:"p"},"config.cert.force_create")," to\nthe default value (",(0,i.kt)("inlineCode",{parentName:"p"},"'false'"),"). Otherwise, in future redeployments you might\nforget about this setting but still re-generate the TLS self-signed certificate,\nand thus other machines will stop working with the redeployed machine because\nthey won't have this new certificate installed."),(0,i.kt)("p",null,"After redeploying the affected machine, you just need to uninstall the old\ncertificate in the connected peers and install the new one. Let's say that in\nour example we have a deployment with three machines, ",(0,i.kt)("inlineCode",{parentName:"p"},"focal-s1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"focal-a1")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"focal-a2")," and we are changing the hostname of the election authority ",(0,i.kt)("inlineCode",{parentName:"p"},"focal-a2"),"\nto ",(0,i.kt)("inlineCode",{parentName:"p"},"focal-a3"),"."),(0,i.kt)("p",null,"These would be the steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Obtain the new eopeer package executing ",(0,i.kt)("inlineCode",{parentName:"li"},"sudo eopeers --show-mine")," (or\n",(0,i.kt)("inlineCode",{parentName:"li"},"sudo eopeers --show-mine --private-ip")," if it's going to be used in a local\nnetwork). Write that certificate in a file called ",(0,i.kt)("inlineCode",{parentName:"li"},"focal-a3.pkg")," that we will\nuse later, both in ",(0,i.kt)("inlineCode",{parentName:"li"},"focal-s1")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"focal-a1"),"."),(0,i.kt)("li",{parentName:"ol"},"Uninstall the previous eopeer package for ",(0,i.kt)("inlineCode",{parentName:"li"},"focal-a2")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"focal-s1")," and\n",(0,i.kt)("inlineCode",{parentName:"li"},"focal-a1")," executing ",(0,i.kt)("inlineCode",{parentName:"li"},"sudo eopeers --uninstall focal-a2"),". Note that if the\nelection authority being uninstalled is the master authority in the sequent server\nand was installed using ",(0,i.kt)("inlineCode",{parentName:"li"},"--keystore /home/ballotbox/keystore.jks"),", then the\nuninstall in ",(0,i.kt)("inlineCode",{parentName:"li"},"focal-s1")," also needs to have that parameter to remove the\ncertificate also from there. In that case, the command to execute would be\n",(0,i.kt)("inlineCode",{parentName:"li"},"eopeers --uninstall focal-a2 --keystore /home/ballotbox/keystore.jks"),"."),(0,i.kt)("li",{parentName:"ol"},"Install the new eopeer package in for ",(0,i.kt)("inlineCode",{parentName:"li"},"focal-a3")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"focal-s1")," and\n",(0,i.kt)("inlineCode",{parentName:"li"},"focal-a1")," executing ",(0,i.kt)("inlineCode",{parentName:"li"},"sudo eopeers --install focal-a3.pkg"),". Again, if this\nauthority is to be the master authority in the sequent server, then append\n",(0,i.kt)("inlineCode",{parentName:"li"},"--keystore /home/ballotbox/keystore.jks")," to that command when being\nexecuted in ",(0,i.kt)("inlineCode",{parentName:"li"},"focal-s1"),".")),(0,i.kt)("h4",{id:"for-an-sequent-server"},"For an sequent server"),(0,i.kt)("p",null,"The process with an sequent server is similar but a bit more nuanced because the\ncertificate lies in multiple places. Before redeploying, you need to uninstall\nall the eopeers installed in the server using ",(0,i.kt)("inlineCode",{parentName:"p"},"eopeers --list")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"eopeers --uninstall <hostname> [<hostname> ..]"),"."),(0,i.kt)("p",null,"Then, you need to remove the files ",(0,i.kt)("inlineCode",{parentName:"p"},"/home/ballotbox/keystore.jks")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"/home/ballotbox/certs.p12"),". Afterwards, you can follow the instructions\nin the previous section to redeploy and redistribute the certificate to the\npeers. Finally, you need to re-install the certificates of the peers in the\nsequent server again."))}d.isMDXComponent=!0},5035:function(e,t,n){t.Z=n.p+"assets/files/config.master-6ae3a8332146465afdb3a9a3dbd378f0.yml"},4079:function(e,t,n){t.Z=n.p+"assets/files/deployment-skel-2ec96756c56cb7c5f45f9dbcc58250e0.yml"},8081:function(e,t,n){t.Z=n.p+"assets/files/tmux.conf-1ea944c595a2e9828fd022867ac9a3ce.yml"}}]);