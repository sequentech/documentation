"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[242],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),h=p(a),m=r,d=h["".concat(s,".").concat(m)]||h[m]||u[m]||l;return a?n.createElement(d,o(o({ref:t},c),{},{components:a})):n.createElement(d,o({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},3457:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=a(3117),r=(a(7294),a(3905));const l={sidebar_position:2,title:"Release How-to"},o=void 0,i={unversionedId:"general/contribute/release-howto",id:"general/contribute/release-howto",title:"Release How-to",description:"In this howto we will explain how can a new release be published step by step.",source:"@site/docs/general/contribute/release-howto.md",sourceDirName:"general/contribute",slug:"/general/contribute/release-howto",permalink:"/documentation/docs/general/contribute/release-howto",draft:!1,editUrl:"https://github.com/sequentech/documentation/edit/master/docs/general/contribute/release-howto.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Release How-to"},sidebar:"generalSidebar",previous:{title:"Release lifecycle and cadence",permalink:"/documentation/docs/general/contribute/release-lifecycle"},next:{title:"Reference",permalink:"/documentation/docs/general/reference/"}},s={},p=[],c={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this howto we will explain how can a new release be published step by step.\nPlease refer to the ",(0,r.kt)("a",{parentName:"p",href:"/documentation/docs/general/contribute/release-lifecycle"},"Release Lifecycle")," document to\nknow more about when to do what type of release."),(0,r.kt)("h1",{id:"setup"},"Setup"),(0,r.kt)("p",null,"Releases are managed using the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sequentech/release-tool"},"release-tool project"),". Each\nrepository can be released independently."),(0,r.kt)("p",null,"Please install and setup release-tool as described in the repository's\nREADME file."),(0,r.kt)("h1",{id:"release-commands"},"Release commands"),(0,r.kt)("p",null,"Publishing a release is actually compromised of multiple (and sometimes\noptional) steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Changing the version in the code")),(0,r.kt)("p",null,"The code of the software platform itself usually has some reference to the\nrelease. As we are creating a new release, this code needs to be updated."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Creating a release branch")),(0,r.kt)("p",null,"For example ",(0,r.kt)("inlineCode",{parentName:"p"},"5.0.x")," branch, so that other patch releases fork from there.\nThis branch needs to be created locally and pushed to the public repository."),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Creating a release git tag")),(0,r.kt)("p",null,"Creating the git tag and pushing it to the repository."),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Publishing a github release.")),(0,r.kt)("p",null,"We can do all this in one go with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'./release.py \\\n    --version 5.0.0-beta.1 \\\n    --change-version \\\n    --base-branch master \\\n    --create-branch 5.0.x \\\n    --create-tag \\\n    --release-title "5.0.0-beta.1 release" \\\n    --generate-release-notes \\\n    --prerelease \\\n    --create-release \\\n    --path ../election-portal\n')),(0,r.kt)("p",null,"Also note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"release.py")," script in this configuration will:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Stash your current changes in the ",(0,r.kt)("inlineCode",{parentName:"li"},"election-portal")," repository"),(0,r.kt)("li",{parentName:"ul"},"Remove all untracked files and directories (except those ignored by ",(0,r.kt)("inlineCode",{parentName:"li"},".gitignore"),")"),(0,r.kt)("li",{parentName:"ul"},"Create a branch from origin/master, commit the changes and force push it to\nthe origin"),(0,r.kt)("li",{parentName:"ul"},"Create tag from the just created commit and force push it to the origin"),(0,r.kt)("li",{parentName:"ul"},"Create a release from the just created tag")),(0,r.kt)("p",null,"If you are releasing in an existing branch for a minor release, the command\nwould probably be more similar to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./release.py \\\n    --version 5.0.0-beta.2 \\\n    --change-version \\\n    --base-branch 5.0.x \\\n    --push-current-branch \\\n    --create-tag \\\n    --release-title \"5.0.0-beta.2 release\" \\\n    --previous-tag-name '5.0.0-beta.1' \\\n    --generate-release-notes \\\n    --create-release \\\n    --path ../election-portal\n")),(0,r.kt)("p",null,"Note that here:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We are not creating the ",(0,r.kt)("inlineCode",{parentName:"li"},"5.0.x"),"  branch, because it already exists. Instead,\nwe are pushing current branch (5.0.x, set with ",(0,r.kt)("inlineCode",{parentName:"li"},"--base-branch 5.0.x"),")."),(0,r.kt)("li",{parentName:"ul"},"We are specifying ",(0,r.kt)("inlineCode",{parentName:"li"},"--previous-tag-name '5.0.0-beta.1'"),", because otherwise the\ngithub-generated release notes would use the most recent release as a base, and\nthat might not be what we want as the previous release might have been for\na different major version.")),(0,r.kt)("p",null,"To do a full plataform release, these are all the projects that need to be\nreleased using the previous command:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"common-ui"),(0,r.kt)("li",{parentName:"ul"},"admin-console"),(0,r.kt)("li",{parentName:"ul"},"election-portal"),(0,r.kt)("li",{parentName:"ul"},"voting-booth"),(0,r.kt)("li",{parentName:"ul"},"ballot-box"),(0,r.kt)("li",{parentName:"ul"},"deployment-tool"),(0,r.kt)("li",{parentName:"ul"},"tally-methods"),(0,r.kt)("li",{parentName:"ul"},"tally-pipes"),(0,r.kt)("li",{parentName:"ul"},"election-verifier"),(0,r.kt)("li",{parentName:"ul"},"frestq"),(0,r.kt)("li",{parentName:"ul"},"election-orchestra"),(0,r.kt)("li",{parentName:"ul"},"iam"),(0,r.kt)("li",{parentName:"ul"},"misc-tools"),(0,r.kt)("li",{parentName:"ul"},"mixnet"),(0,r.kt)("li",{parentName:"ul"},"documentation"),(0,r.kt)("li",{parentName:"ul"},"ballot-verifier"),(0,r.kt)("li",{parentName:"ul"},"release-tool")),(0,r.kt)("p",null,"Note that the order listed above is important for automatic unit tests. For\nexample, ",(0,r.kt)("inlineCode",{parentName:"p"},"election-verifier")," uses ",(0,r.kt)("inlineCode",{parentName:"p"},"tally-pipes"),", which in turn depends on\n",(0,r.kt)("inlineCode",{parentName:"p"},"tally-methods"),". Please do the releasing in order. If you don't, you'll get some\ngithub actions failed. If this happens, just rerun the github actions after all\nthe releases have been done and that should fix the problem."),(0,r.kt)("p",null,"You can automate the release of all these repositories with a script like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export REPOS=(common-ui admin-console election-portal voting-booth ballot-box deployment-tool tally-methods tally-pipes election-verifier frestq election-orchestra iam misc-tools mixnet documentation ballot-verifier release-tool)\n\nfor i in $REPOS\ndo\n    ./release.py \\\n        --version 6.1.0 \\\n        --change-version \\\n        --base-branch '6.1.x' '6.0.x' \\\n        --push-current-branch \\\n        --create-tag \\\n        --release-title \"6.1.0 release\" \\\n        --previous-tag-name '6.0.3' \\\n        --generate-release-notes \\\n        --create-release \\\n        --path ../$i\ndone\n")),(0,r.kt)("p",null,"Note that we specified multiple branch names with ",(0,r.kt)("inlineCode",{parentName:"p"},"--base-branch"),". This is\nbecause in some of the repositories, there might not be any new commits or they\nmight be in the previous ",(0,r.kt)("inlineCode",{parentName:"p"},"6.0.x")," branch. The first name of the base-branch will\nalways indicate the final branch to push, and it will use that branch as a base\nif it does exist. If it's not yet created, the release script will try to use\nthe other given branch names as a base, in order."),(0,r.kt)("h1",{id:"release-testing-and-version-schedule"},"Release Testing and version schedule"),(0,r.kt)("p",null,"For any major release, first a ",(0,r.kt)("inlineCode",{parentName:"p"},"<major>.<minor>.<patch>-beta.1")," should be\ncreated. After this has been done for the whole platform:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"All automatic unit testing should pass."),(0,r.kt)("li",{parentName:"ol"},"All ",(0,r.kt)("a",{parentName:"li",href:"../reference/testing/"},"E2E integration tests")," should pass."),(0,r.kt)("li",{parentName:"ol"},"Enough time for doing additional manual testing bug fixing should be\nallocated.")),(0,r.kt)("p",null,"After this bugfixing, either a new beta or a final release should be created,\nwith all the bugfixes being applied in the release branch which should be\ncalled ",(0,r.kt)("inlineCode",{parentName:"p"},"<major>.<minor>.x"),". This should happen after 7 or more days after the\ninitial beta. A second beta (or even a third one and so on) can happen if the\nprevious beta release was not deemed to be stable enough even after some\nbugfixes have been applied."),(0,r.kt)("p",null,"Also, even if no bugfix is applied, a new final (with ",(0,r.kt)("inlineCode",{parentName:"p"},"--prerelease"),") release\nshould be created, named ",(0,r.kt)("inlineCode",{parentName:"p"},"<major>.<minor>.0"),", with patch version ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),". "),(0,r.kt)("h1",{id:"future"},"Future"),(0,r.kt)("p",null,"In the future, we should automate the release management command and include\nthem within each different project instead of having a separate repository to\nhandle this."),(0,r.kt)("p",null,"Some tools we might take a look at to do so:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/marketplace/actions/automatic-releases"},"https://github.com/marketplace/actions/automatic-releases"))),(0,r.kt)("p",null,"Also we should automate the releases for the documentation itself, allowing\nhaving multiple version of the documentation, to match with the releases."))}u.isMDXComponent=!0}}]);